[{"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\App.js":"1","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\reportWebVitals.js":"2","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\ToDo.jsx":"3","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\Tasks.js":"4","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\index.js":"5","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\blocks\\blocks.jsx":"6","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\blocks\\blockProp.js":"7","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\blocks\\Blocks.jsx":"8","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\blocks\\BlockProp.js":"9","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\idGen.js":"10","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\addTasks.js":"11","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\confirmModals.js":"12","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\editModal.js":"13","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\utils.js":"14"},{"size":271,"mtime":1606944848046,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":7585,"mtime":1610835189210,"results":"18","hashOfConfig":"16"},{"size":2105,"mtime":1610834872957,"results":"19","hashOfConfig":"16"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"16"},{"size":659,"mtime":1606686449598,"results":"21","hashOfConfig":"16"},{"size":206,"mtime":1606689944796,"results":"22","hashOfConfig":"16"},{"size":658,"mtime":1606848497219,"results":"23","hashOfConfig":"16"},{"size":206,"mtime":1606689956840,"results":"24","hashOfConfig":"16"},{"size":124,"mtime":1606951032247,"results":"25","hashOfConfig":"16"},{"size":2954,"mtime":1610834762938,"results":"26","hashOfConfig":"16"},{"size":650,"mtime":1610283030636,"results":"27","hashOfConfig":"16"},{"size":2819,"mtime":1610834435746,"results":"28","hashOfConfig":"16"},{"size":55,"mtime":1610833966323,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"1db19qj",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\App.js",["62","63"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport ToDo from './ToDo'\r\nimport Blocks from './blocks/Blocks'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n      <ToDo /> \r\n      // <Blocks/>\r\n  );\r\n  \r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\reportWebVitals.js",[],["64","65"],"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\ToDo.jsx",["66"],"import React, { PureComponent } from 'react';\r\nimport Tasks from './Tasks'\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport AddTask from './addTasks';\r\nimport './ToDo.css'\r\nimport Confirm from \"./confirmModals\"\r\nimport EditModal from './editModal'\r\n\r\nclass ToDo extends PureComponent {\r\n    state = {\r\n        editTask: null,\r\n        tasks: [],\r\n        selectedTasks: new Set(),\r\n        toggle: false,\r\n        openTaskModal: false,\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"http://localhost:3001/task\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n        })\r\n            .then((res) => res.json())\r\n            .then((response) => {\r\n                if (response.error) {\r\n                    throw response.error\r\n                }\r\n                this.setState({\r\n                    tasks: response.reverse()\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    handleCheck = (taskId) => {\r\n        const selectedTasks = new Set(this.state.selectedTasks);\r\n        if (selectedTasks.has(taskId)) {\r\n            selectedTasks.delete(taskId)\r\n\r\n        } else {\r\n\r\n            selectedTasks.add(taskId)\r\n        }\r\n        this.setState({\r\n            selectedTasks\r\n        })\r\n    }\r\n\r\n    addTask = (data) => {\r\n        const body = JSON.stringify(data)\r\n        fetch(\"http://localhost:3001/task\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            body\r\n        })\r\n            .then((res) => res.json())\r\n            .then((response) => {\r\n                if (response.error) {\r\n                    throw response.error\r\n                }\r\n                const tasks = [response, ...this.state.tasks]\r\n\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    openTaskModal: false\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    handleDelete = (taskId) => {\r\n        fetch(`http://localhost:3001/task/${taskId}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n        })\r\n            .then((res) => res.json())\r\n            .then((response) => {\r\n                if (response.error) {\r\n                    throw response.error\r\n                }\r\n                const newTasks = this.state.tasks.filter(task => task._id !== taskId);\r\n                this.setState({\r\n                    tasks: newTasks\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    toggleConfirm = () => {\r\n        this.setState({\r\n            toggle: !this.state.toggle\r\n        })\r\n    }\r\n\r\n    toggleEditModal = (task) => {\r\n        this.setState({\r\n            editTask: task\r\n        })\r\n\r\n    }\r\n\r\n    saveTask = (editedTasks) => {\r\n        fetch(`http://localhost:3001/task/${editedTasks._id}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(editedTasks)\r\n        })\r\n            .then((res) => res.json())\r\n            .then((response) => {\r\n                if (response.error) {\r\n                    throw response.error\r\n                }\r\n                const tasks = [...this.state.tasks]\r\n                const foundTaskId = tasks.findIndex((task) => task._id === editedTasks._id)\r\n                tasks[foundTaskId] = editedTasks\r\n\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    editTask: null,\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n\r\n\r\n    removeSelected = () => {\r\n        let taskIds = { tasks: [...this.state.selectedTasks] }\r\n        fetch(`http://localhost:3001/task`, {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(taskIds)\r\n        })\r\n            .then((res) => res.json())\r\n            .then((response) => {\r\n                if (response.error) {\r\n                    throw response.error\r\n                }\r\n                let tasks = [...this.state.tasks]\r\n\r\n                this.state.selectedTasks.forEach((id) => {\r\n                    tasks = tasks.filter((task) => task._id !== id)\r\n\r\n                })\r\n                this.setState({\r\n                    tasks,\r\n                    selectedTasks: new Set(),\r\n                    toggle: false\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n    toggleTaskModal = () => {\r\n        this.setState({\r\n            openTaskModal: !this.state.openTaskModal\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { tasks, toggle, selectedTasks, editTask, openTaskModal } = this.state;\r\n        const tasksArray = tasks.map((task) => {\r\n            return (\r\n                <Col className=\"colCard\" key={task._id} xs={12} sm={6} md={4} lg={3} xl={2}>\r\n                    <Tasks\r\n                        data={task}\r\n                        onRemove={this.handleDelete}\r\n                        onCheck={this.handleCheck}\r\n                        disabled={!!selectedTasks.size}\r\n                        onEdit={() => this.toggleEditModal(task)}\r\n                    />\r\n                </Col>\r\n            )\r\n        })\r\n        return (\r\n            <div className='ToDo'>\r\n                <Container>\r\n                    <Row className='justify-content-center'>\r\n                        <Col sm={6} xl={2} lg={2} md={3}>\r\n                            <Button\r\n                                variant = \"outline-success\"\r\n                                onClick = {this.toggleTaskModal}\r\n                                disabled = {!!selectedTasks.size}\r\n                            >\r\n                                Add Task\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <Row className=\"mb-3\">\r\n                    {tasksArray}\r\n                </Row>\r\n                <Button variant=\"outline-danger\"\r\n                    onClick={this.removeSelected}\r\n                    onClick={this.toggleConfirm}\r\n                    disabled={selectedTasks.size === 0 ? true : false}\r\n                >\r\n                    Remove Selected\r\n                </Button>\r\n                {toggle &&\r\n                    <Confirm\r\n                        onSubmit={this.removeSelected}\r\n                        onClose={this.toggleConfirm}\r\n                        count={selectedTasks.size}\r\n                    />\r\n                }\r\n                {!!editTask &&\r\n                    <EditModal\r\n                        data={editTask}\r\n                        onSave={this.saveTask}\r\n                        onClose={() => this.toggleEditModal(null)}\r\n                    />\r\n                }\r\n                {   openTaskModal &&\r\n                    <AddTask\r\n                        onAdd={this.addTask}\r\n                        disabled={!!selectedTasks.size}\r\n                        onClose = {this.toggleTaskModal}\r\n                    />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDo","C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\Tasks.js",[],"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\index.js",[],["67","68"],"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\blocks\\blocks.jsx",["69"],"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\blocks\\blockProp.js",[],"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\blocks\\Blocks.jsx",[],"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\blocks\\BlockProp.js",[],"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\idGen.js",[],"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\addTasks.js",[],"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\confirmModals.js",[],"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\editModal.js",["70","71"],"C:\\Users\\hovo-\\Desktop\\react ap project\\project1\\src\\utils.js",[],{"ruleId":"72","severity":1,"message":"73","line":1,"column":8,"nodeType":"74","messageId":"75","endLine":1,"endColumn":12},{"ruleId":"72","severity":1,"message":"76","line":4,"column":8,"nodeType":"74","messageId":"75","endLine":4,"endColumn":14},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":215,"column":21,"nodeType":"83","endLine":215,"endColumn":49},{"ruleId":"77","replacedBy":"84"},{"ruleId":"79","replacedBy":"85"},{"ruleId":"86","severity":2,"message":"87","line":20,"column":26,"nodeType":"74","messageId":"88","endLine":20,"endColumn":36},{"ruleId":"72","severity":1,"message":"89","line":1,"column":10,"nodeType":"74","messageId":"75","endLine":1,"endColumn":27},{"ruleId":"72","severity":1,"message":"90","line":2,"column":17,"nodeType":"74","messageId":"75","endLine":2,"endColumn":26},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Blocks' is defined but never used.","no-native-reassign",["91"],"no-negated-in-lhs",["92"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["91"],["92"],"no-undef","'blockProps' is not defined.","undef","'faCaretSquareDown' is defined but never used.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]